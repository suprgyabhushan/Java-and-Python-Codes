def leap_year(y):
    if (y % 4 == 0):
        return True
    else:
        return False

def dayinmonth(month,leap_year): #leap_year must be passes to this function
    #This checks for "january" and "february" with leap years
    #and falls back to last option on EVERYTHING ELSE like a feb without a leap year or even a "march"
    if month == 1:
        print "31 days"
    elif month == 2 and leap_year == True:
        print "not"
    else:
        print "leap year"

    #this is a separate block that runs AFTER the previous block
    if month == 3:
        print "31 days"
    elif month == 4:
        print "30 days"
    elif month == 5:
        print "31 days"
    elif month == 6:
        print "30 days"
    elif month == 7:
        print "31 days"
    elif month == 8:
        print "31 days"
    elif month == 9:
        print "30 days"
    elif month == 10:
        print "31 days"
    elif month == 11:
        print "30 days"
    elif month == 12:
        print "31 days"
    else:
        print "invalid input" #so that it doesnt fail silently when I enter 2


return (datef[2]-dater[2])
	elif (datef[2]<dater[2]):
		return (dater[2]-datef[2])
	elif (datef[2]=dater[2]):
		if (datef[1]>dater[1]):
			return (datef[1]-dater[1])
		elif (datef[1]<dater[1]):
			return (dater[1]-datef[1])
		elif (datef[1]=dater[1]):
			if (datef[0]>dater[0]):
				return (datef[0]-dater[0])
			elif (datef[0]<dater[0]):
				return (dater[0]-datef[0])
















	total2=0	
	f=dater[1]-1
	while (f>=1):
		if f==2 and leap_year(dater[2]):
			g=list3[1]
			total2=total2+g
		elif f==2:					
			g=list3[0] 
			total2=total2+g
		elif f!=2:
			for item1 in list2:
				g=item1
				total1=total1+g
		f=f-1
		print total2
		
	
	if datef[1]==1 and datef[1]==3 and datef[1]==5 and datef[1]==7 and datef[1]==8 and datef[1]==10 and datef[1]==12 :
		j=32-datef[0]
		print j
	if datef[1]==4 and datef[1]==6 and datef[1]==9 and datef[1]==11 :
		j=32-datef[0]
		print j
	if datef[1]==2 and leap_year(datef[2]):
		j=29-datef[0]
		print j
	elif datef[1]==2:
		j=30-datef[0]
		print j

	print ((datef[2]-dater[2])*365 + total + total1 + total2 + j + dater[0])




diff=((dater[2]-datef[2])-1)*365
k = diff + leapyearsinbetween() + days1inbetween() + days2inbetween() + days3inbetween() + dater[0]-1
l=k%7
def getweekday(m):
	if l==6:
		return "Sunday"
	if l==5:
		return "Monday" 	
	if l==4:
		return "Tuesday"
	if l==3:
		return "Wednesday" 	
	if l==2:
		return "Thursday"
	if l==1:
		return "Friday" 	
	if l==0:
		return "Saturday"	











elif (datef[2]==dater[2]):
				
		def days4inbetween():
			total4=0 
			m=datef[1]+1
			while (m<=(dater[1]-1)):		
				if (m==1):
					total4=total4+e
			
				if ((m==2) and (leap_year(datef[2])==True)):
					total4=total4+c
			
				elif (m==2):					
					total4=total4+d
			
				if (m==3):
					total4=total4+e
			
				if (m==4):
					total4=total4+f
			
				if (m==5):
					total4=total4+e
			
				if (m==6):
					total4=total4+f
			
				if (m==7):
					total4=total4+e
			
				if (m==8):
					total4=total4+e
			
				if (m==9):
					total4=total4+f
			
				if (m==10):
					total4=total4+e
			
				if (m==11):
					total4=total4+f
			
				if (m==12):
					total4=total4+e
			m=m+1						
			return total4		


		l = days3inbetween() + days4inbetween() + dater[0]-1
		print l

		 	



